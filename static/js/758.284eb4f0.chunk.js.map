{"version":3,"file":"static/js/758.284eb4f0.chunk.js","mappings":"yNA0CA,UAtCa,SAAHA,GAAmB,IAAdC,EAAOD,EAAPC,QACbC,GAAkCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAgCL,EAAAA,EAAAA,UAASM,EAAAA,EAAAA,MAAcC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAhDG,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAA0BV,EAAAA,EAAAA,UAAS,MAAKW,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAqBtB,OAnBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEiB,OAFjBF,EAAAC,KAAA,EAEZb,EAAYH,EAAAA,EAAAA,SAAiBe,EAAAE,KAAA,GAEVC,EAAAA,EAAAA,IAAa1B,GAAS,KAAD,EAAlCsB,EAAIC,EAAAI,KACVrB,EAAagB,EAAKM,KAAKC,MAAM,EAAG,KAChClB,EAAYH,EAAAA,EAAAA,SAAiBe,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAG7BZ,EAAYH,EAAAA,EAAAA,OACZO,EAAQQ,EAAAO,IAAQ,yBAAAP,EAAAQ,OAAA,GAAAV,EAAA,kBAEnB,kBAZY,OAAAH,EAAAc,MAAA,KAAAC,UAAA,KAaK,OAAd5B,GACFY,GAEJ,GAAG,CAACZ,EAAWL,KAERkC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACJzB,IAAaF,EAAAA,EAAAA,UAAoB4B,EAAAA,EAAAA,KAAA,OAAAD,SAAK,eACtCzB,IAAaF,EAAAA,EAAAA,OAAkBM,IAASsB,EAAAA,EAAAA,KAAA,OAAAD,SAAMrB,EAAMuB,UACpDhC,IAAa+B,EAAAA,EAAAA,KAAA,MAAAD,SACX9B,EAAUiC,KAAI,SAAAC,GAAK,OAClBL,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKI,IAAI,GAAGC,IAAI,MAChBL,EAAAA,EAAAA,KAAA,KAAAD,SAAII,EAAMG,SAFHH,EAAMI,GAGV,QAIb,C","sources":["Pages/Cast.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { STATUSES } from \"utils/Constans\";\nimport { getMovieCast } from \"services/movieService\";\n\nconst Cast = ({movieId}) => {\n  const [movieCast, setMovieCast] = useState(null);\n  const [statuses, setStatuses] = useState(STATUSES.idle);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        setStatuses(STATUSES.pending)\n\n        const data = await getMovieCast(movieId);\n        setMovieCast(data.cast.slice(0, 10));\n        setStatuses(STATUSES.success)\n\n      } catch (error) {\n        setStatuses(STATUSES.error);\n        setError(error);\n      }\n    }\n    if (movieCast === null) {\n      getCast();\n    }\n  }, [movieCast, movieId])\n\n  return <div>\n    {statuses === STATUSES.pending && <div>Loading...</div>}\n    {statuses === STATUSES.error && error && <div>{error.message}</div>}\n    {movieCast && <ul>\n      {movieCast.map(actor =>\n        <li key={actor.id}>\n          <img src=\"\" alt=\"\" />\n          <p>{actor.name}</p>\n        </li>\n      )}\n    </ul>}\n  </div>\n}\n\nexport default Cast;"],"names":["_ref","movieId","_useState","useState","_useState2","_slicedToArray","movieCast","setMovieCast","_useState3","STATUSES","_useState4","statuses","setStatuses","_useState5","_useState6","error","setError","useEffect","getCast","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","getMovieCast","sent","cast","slice","t0","stop","apply","arguments","_jsxs","children","_jsx","message","map","actor","src","alt","name","id"],"sourceRoot":""}